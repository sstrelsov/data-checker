"""Package to generate random numbers to select a random sample of data"""
import random
import sys
from time import localtime, strftime
import pandas as pd
import gspread_formatting as gsf
from gspread_pandas import Spread
import gspread

# Authenticate Google Sheets
gc = gspread.oauth()

def spread_exists(a):
    """Returns True if a Google Spreadsheet exists with a given name."""
    # User didn't enter a valid file name
    try:
        gc.open(a)
    # User didn't enter a valid spreadsheet name either
    except gspread.exceptions.SpreadsheetNotFound:
        return False
    else:
        return True

def stamp_output(output_gspread,input_gspread_url):
    """Stamps header of output gsheet with email, time, and link to input sheet"""
    # Gets current time
    current_time = str(strftime("%Y-%m-%d %H:%M:%S",localtime()))
    # Gets hyperlink of input gspread url
    hyperlink = '=HYPERLINK("'+input_gspread_url+'","Link to Original")'
    # Update header contents of gspread output
    output_gspread.update_cells(
        "A1",
        "C1",
        [f"Generated by: {output_gspread.email}", current_time, hyperlink]
    )

def format_header(sheet):
    # Resize all columns to fit content width
    sheet.columns_auto_resize(0,sheet.col_count)
    # Format the specified gsheet in the output gspread, adding background and alignment
    gsf.format_cell_range(
        sheet,
        'A1:C1',
        gsf.CellFormat(
        backgroundColor=gsf.Color(1, 0.9, 0.9),
        textFormat=gsf.TextFormat(bold=False, foregroundColor=gsf.Color(0,0,0)),
        horizontalAlignment='CENTER'
        ))
    # Bold the header row
    gsf.format_cell_range(
        sheet,
        '2',
        gsf.CellFormat(
        textFormat=gsf.TextFormat(bold=True)
        )
    )

def get_gspread_data(spread_names):
    """Creates dictionary from key name of input sheet. Values are df and spreadsheet url."""
    spread_data = {}
    for spread_name in spread_names:
        key_name = spread_name[0:7]
        spread = gc.open(spread_name)
        spread_data[key_name] = {
            "df": Spread(spread_name).sheet_to_df(),
            "url": f"https://docs.google.com/spreadsheets/d/{spread.id}"
            }
    return spread_data

def build_pandas_df(pandas_df,sample_size):
    """Returns a pandas dataframe with a specified random sample of the input dataframe"""
    firm_indices = []
    data_frame = pd.DataFrame(pandas_df)
    firm_indices = list(set(data_frame.index.values.tolist()))
    while "" in firm_indices:
        firm_indices.remove("")
    if len(firm_indices) >= sample_size:
        firm_indices = random.sample(firm_indices, sample_size)
        data_frame = data_frame.loc[firm_indices]
        return data_frame
    return None

def create_gspread(name):
    """Helper func creates output spread if doesn't already exist"""
    if not spread_exists(name):
        folder_id = input("Enter ID of folder to place new spreadsheet: ")
        # If no folder_id entered, simply create and open new spread
        if folder_id == "":
            spread = gc.create(name)
            spread = gc.open(name)
            return spread
        spread = gc.create(name,folder_id)
        spread = gc.open(name,folder_id)
        return spread
    return gc.open(name)

def build_output(input_gspreads, output_gspread_name, sample_size):
    """Outputs Google Spreadsheet with sheets containging random samples of input spreads."""
    # Open output gspread to allow for gpsread_formatting package to format header
    spread = create_gspread(output_gspread_name)
    pandas_spread = Spread(output_gspread_name)

    # Iterate through input spreadsheets to output random samples
    for input_spread_name,values in input_gspreads.items():
        try:
            pandas_spread.df_to_sheet(
                build_pandas_df(values['df'],sample_size),
                index=True,
                start='A2',
                sheet=input_spread_name,
                freeze_headers=True,
            )
        except AttributeError:
            print("[DF_TO_SHEET] Error loading Pandas dataframe.")
            sys.exit()
        stamp_output(pandas_spread,values["url"])
        format_header(spread.worksheet(input_spread_name))
        print(f"Sheet {input_spread_name} uploaded successfully.")
    print(f"SUCCESS. Outputs: https://docs.google.com/spreadsheets/d/{spread.id}")
