import random
from time import localtime, strftime
import pandas as pd
import gspread_formatting as gsf
from gspread_pandas import Spread
import gspread

# Authenticate Google Sheets
gc = gspread.oauth()

def spread_exists(a):
    """Returns True if a Google Spreadsheet exists with a given name."""
    # User didn't enter a valid file name
    try:
        gc.open(a)
    # User didn't enter a valid spreadsheet name either
    except gspread.exceptions.SpreadsheetNotFound:
        return False
    else:
        return True

def stamp_output(output_gspread,input_gspread_url):
    """Stamps header of output gsheet with email, time, and link to input sheet"""
    # Gets current time
    current_time = str(strftime("%Y-%m-%d %H:%M:%S",localtime()))
    # Gets hyperlink of input gspread url
    hyperlink = '=HYPERLINK("'+input_gspread_url+'","Link to Original")'
    # Update header contents of gspread output
    output_gspread.update_cells(
        "A1",
        "C1",
        [f"Generated by: {output_gspread.email}", current_time, hyperlink]
    )

def format_header(sheet):
    # Resize all columns to fit content width
    sheet.columns_auto_resize(0,sheet.col_count)
    # Format the specified gsheet in the output gspread, adding background and alignment
    gsf.format_cell_range(
        sheet,
        'A1:C1',
        gsf.CellFormat(
        backgroundColor=gsf.Color(1, 0.9, 0.9),
        textFormat=gsf.TextFormat(bold=False, foregroundColor=gsf.Color(0,0,0)),
        horizontalAlignment='CENTER'
        ))
    # Bold the header row
    gsf.format_cell_range(
        sheet,
        '2',
        gsf.CellFormat(
        textFormat=gsf.TextFormat(bold=True)
        )
    )

def create_input_sheet_dict(sheet_names):
    """Creates dictionary from key name of input sheet. Values are df and spreadsheet url."""
    gsheets_dict = {}
    for sheet_name in sheet_names:
        key_name = sheet_name[0:7]
        gsheet = gc.open(sheet_name)
        gsheets_dict[key_name] = {
            "df": Spread(sheet_name).sheet_to_df(),
            "url": f"https://docs.google.com/spreadsheets/d/{gsheet.id}"
            }
    return gsheets_dict

def create_output(input_gspreads_dict, output_gspread_name, sample_size):
    """Iterates through list of input spreads to output a sample of each spread to different sheets in the output spread"""
    # Create output sheet if it doesn't exist
    if not spread_exists(output_gspread_name):
        spread = gc.create(output_gspread_name)
    pandas_spread = Spread(output_gspread_name)
    # Open output gspread to allow for gpsread_formatting package to format header
    spread = gc.open(output_gspread_name)
    for input_spread_name,values in input_gspreads_dict.items():
        firm_indices = []
        data_frame = pd.DataFrame(values["df"])
        firm_indices = list(set(data_frame.index.values.tolist()))
        while("" in firm_indices):
            firm_indices.remove("")
        if len(firm_indices) >= sample_size:
            firm_indices = random.sample(firm_indices, sample_size)
            data_frame = data_frame.loc[firm_indices]
            pandas_spread.df_to_sheet(
                    data_frame,
                    index=True,
                    start='A2',
                    sheet=input_spread_name,
                    freeze_headers=True,
                    )
            sheet = spread.worksheet(input_spread_name)
            stamp_output(pandas_spread,values["url"])
            format_header(sheet)
            print(f"Sheet {input_spread_name} uploaded successfully.")
    print(f"All sheets loaded successfully. Outputs: https://docs.google.com/spreadsheets/d/{spread.id}")
